function my_map(f, xs) {
    return is_null(xs)
            ? null
            : accumulate(my_map, null, xs);
}

// Test
my_map(x => x + 1, list(1, 2, 3));
// Result: list(2, 3, 4)

function remove_duplicates(lst) {
    function same(x) {
        function search(n) {
            return list_ref(lst, n);
        }
        return x === my_map(search, enum_list(0, length(lst) - 1));
    }
    return filter(same, lst);
}

remove_duplicates(list(1, 2, 3, 4, 4, 3, 2, 1, 2));
// Result: list(1, 2, 3, 4)
remove_duplicates(list("a", "x", "b", "c", "c", "b", "d"));
// Result: list("a", "x", "b", "c", "d")

function makeup_amount(x, coins) {
    if (x === 0) {
    return list(null);
    } else if (x < 0 || is_null(coins)) {
    return null;
    } else {
// Combinations that do not use the head coin.
    const combi_A = ...
// Combinations that do not use the head coin
// for the remaining amount.
    const combi_B = ...
// Combinations that use the head coin.
    const combi_C = ...
    return append(combi_A, combi_C);
    }
}

makeup_amount(22, list(1, 10, 5, 20, 1, 5, 1, 50));
// Result: list(list(20, 1, 1), list(10, 5, 1, 5, 1), list(1, 20, 1),
// list(1, 20, 1), list(1, 10, 5, 5, 1),
// list(1, 10, 5, 1, 5))

// best case for insertion_sort is when list is ascending order: theta n 
// worst case for insertion_sort is when list is descending order: theta n^2
// if not told what order: O(n^2) and omega(n)

function insert_cmp(x, xs, cmp) {
    return is_null(xs) 
           ? list(x)
           : cmp(x, head(xs)) 
           ? pair(x, xs)
           : pair(head(xs), insert_cmp(x, tail(xs), cmp));
}

function insertion_sort_cmp(xs, cmp) {
    return is_null(xs) 
           ? xs
           : insert_cmp(head(xs), 
                        insertion_sort_cmp(tail(xs), cmp),
                        cmp);
}

// Test
const xs = list(6, 3, 8, 5, 1, 9, 6, 4, 2, 7);

// (a)
// insertion_sort_cmp(xs, (x, y) => x <= y);
// Result: list(1, 2, 3, 4, 5, 6, 6, 7, 8, 9)

// (b)
// insertion_sort_cmp(xs, (x, y) => x >= y);
// Result: list(9, 8, 7, 6, 6, 5, 4, 3, 2, 1)

// (c)
insertion_sort_cmp(xs, (x, y) => false);        
// should return false in order to bring to the back
// Result: list(7, 2, 4, 6, 9, 1, 5, 8, 3, 6)

// (d)
insertion_sort_cmp(xs, (x, y) => (x % 2 === 0 && x <= y) || 
                                 (x % 2 === 1 && x >= y && y % 2 === 1));
// when x is odd and y is odd: x > y
// when x is even and y is even: x < y
// when x is odd and y is even: false
// when x is even and y is odd: true
// Result: list(2, 4, 6, 6, 8, 9, 7, 5, 3, 1)

// half, rounded downwards
function middle(n) {
    return math_floor(n / 2);
}

// put the first n elements of xs into a list
function take(xs, n) {
    function f(x) {
        return list_ref(xs, x);
    }
    return build_list(f, n);
}

// drop the first n elements from list, return rest
function drop(xs, n) {
    function f(x) {
        return list_ref(reverse(xs), x);
    }
    return reverse(build_list(f, length(xs) - n));
}

// merge two sorted lists into one sorted list
function merge(xs, ys) {
    if (is_null(xs)) {
        return ys;
    } else if (is_null(ys)) {
        return xs;
    } else {
        const x = head(xs);
        const y = head(ys);
        return x < y
              ? pair(x, merge(tail(xs), ys))
              : pair(y, merge(xs, tail(ys)));
    }
}
// best case of merge: lists are (1, 2, 3) and (4, 5, 6), theta(n)
// worst case of merge: lists are (1, 3, 5) and (2, 4, 6), theta(2n) = theta(n)
// big theta(n)

// a list with more than one element is sorted
// by splitting it into two lists of (almost) equal
// length, sorting the halves and then merging them
// together
function merge_sort(xs) {
    if (is_null(xs) || is_null(tail(xs))) {
        return xs;
    } else {
        const mid = middle(length(xs));
        return merge(merge_sort(take(xs, mid)),
                     merge_sort(drop(xs, mid)));
    }
}
// split list until each list has one element
// then merge (while sorting)
// e.g. list is 7, 2, 1, 8, 5, 4, 3, 6
// after first merging, [2 7], [1 8], [4 5], [3 6]
// after second merging, [1 2 7 8], [3 4 5 6]
// lastly, 1 2 3 4 5 6 7 8 will be derived
// const mid = middle(length(xs)) has time complexity of n because length(xs)
// is n
// take(xs, mid) and drop(xs, mid) each have same time complexity of n / 2
// big theta(nlog(n))

// Test
merge_sort(list(7, 6, 3, 8, 4, 6, 5, 9, 8, 3, 1, 5, 2));
